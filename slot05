import pandas as pd

df = pd.DataFrame({'Math': [4, 4, 7, 8, 12, 13, 15, 18, 22, 23, 23, 25], 
                   'Eng': [2, 5, 4, 7, 7, 8, 5, 4, 5, 11, 13, 8]})
df.shape  # Hiển thị kích thước của dataframe (số hàng và cột)

df['bin1'] = pd.qcut(df['Math'], q=5)  # Chia cột "Math" thành 5 khoảng giá trị với số lượng phần tử bằng nhau
df  # Hiển thị dataframe

df['bin1'].value_counts()  # Đếm số lượng giá trị thuộc mỗi khoảng trong "bin1"

df['bin2'] = pd.qcut(df['Math'], q=[0, .2, .4, .6, .8, 1])  # Chia "Math" thành 5 khoảng với tỷ lệ 20% mỗi khoảng
df  # Hiển thị dataframe

df['bin3'] = pd.qcut(df['Math'], q=[0, .2, .4, .6, .8, 1], labels=['A', 'B', 'C', 'D', 'E'])  
# Gán nhãn "A" đến "E" cho các khoảng trong cột "Math" chia tỷ lệ 20% mỗi khoảng
df  # Hiển thị dataframe

df['bin4'] = pd.cut(df['Eng'], bins=[0, 5, 8, float('Inf')], labels=['Bad', 'OK', 'Good'])  
# Chia cột "Eng" thành các khoảng và gán nhãn "Bad", "OK", "Good"
df  # Hiển thị dataframe

df['bin4'].value_counts()  # Đếm số lượng giá trị thuộc mỗi khoảng trong "bin4"

# Label Encoding và One-Hot Encoding
import pandas as pd

gdp = [11, 22, 33, 44, 55, 66, 77]
countries = ['Spain', 'France', 'Spain', 'Germany', 'France']
df = pd.DataFrame(list(zip(gdp, countries)), columns=['GDP', 'Countries'])  # Tạo dataframe từ danh sách GDP và countries
df  # Hiển thị dataframe

from sklearn import preprocessing
label_encoder = preprocessing.LabelEncoder()  
df['labelCountries'] = label_encoder.fit_transform(df['Countries'])  
# Mã hóa các giá trị trong cột "Countries" thành số (Label Encoding)
df  # Hiển thị dataframe

dfOneHotEncoding = pd.get_dummies(df.Countries, prefix='Country')  
# Thực hiện One-Hot Encoding trên cột "Countries"
print(dfOneHotEncoding.head())  # Hiển thị kết quả One-Hot Encoding

df = pd.concat([df, dfOneHotEncoding], axis=1)  # Ghép dataframe ban đầu với dataframe kết quả One-Hot Encoding
df  # Hiển thị dataframe sau khi ghép

from sklearn.preprocessing import LabelBinarizer
y = LabelBinarizer().fit_transform(df.Countries)  
# Thực hiện Label Binarizer (tương tự One-Hot Encoding)
y  # Hiển thị kết quả

from sklearn.preprocessing import OneHotEncoder
y = OneHotEncoder().fit_transform(df[['Countries']]).toarray()  
# Sử dụng OneHotEncoder từ sklearn để mã hóa cột "Countries"
print(y)  # Hiển thị kết quả

# Chuẩn hóa dữ liệu với MaxAbsScaler và MinMaxScaler
import pandas as pd

year = [2010,2011,2012,2013,2014,2015]
salaryHCM = [8.5,9.0,10.5,12.0,11.0,10.0]
salaryLA = [5.5,6.0,6.0,5.5,6.0,5.0]

df = pd.DataFrame(list(zip(year, salaryHCM,salaryLA)), columns=['Year', 'HCM','LA'])  
# Tạo dataframe với thông tin lương của HCM và LA theo năm
df  # Hiển thị dataframe

max_la = df['LA'].abs().max()  # Tính giá trị lớn nhất của cột "LA"
df['macLA'] = df['LA'] / max_la  # Chuẩn hóa giá trị của cột "LA" bằng giá trị max
df  # Hiển thị dataframe sau chuẩn hóa

from sklearn.preprocessing import MaxAbsScaler
scaler = MaxAbsScaler()  
scaled = scaler.fit_transform(df[['HCM','LA']])  
# Chuẩn hóa cột "HCM" và "LA" bằng MaxAbsScaler
scaled_df = pd.DataFrame(scaled, columns=df[['HCM','LA']].columns)  
# Chuyển kết quả chuẩn hóa thành dataframe
print(scaled_df)  # Hiển thị dataframe đã chuẩn hóa

vSc = scaler.transform([[4.5,5.75]])  # Chuẩn hóa giá trị 4.5 và 5.75 bằng MaxAbsScaler
vSc  # Hiển thị kết quả

vR = scaler.inverse_transform([[0.5,0.8]])  # Chuyển đổi ngược lại từ giá trị đã chuẩn hóa sang giá trị ban đầu
vR  # Hiển thị kết quả

min_la = df['LA'].min()  # Tính giá trị nhỏ nhất của cột "LA"
max_la = df['LA'].max()  # Tính giá trị lớn nhất của cột "LA"
df['mmcLA'] = (df['LA'] - min_la) / (max_la - min_la)  
# Chuẩn hóa cột "LA" bằng Min-Max Scaling
df  # Hiển thị dataframe sau chuẩn hóa

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()  
scaled = scaler.fit_transform(df[['HCM','LA']])  
# Chuẩn hóa cột "HCM" và "LA" bằng MinMaxScaler
scaled_df = pd.DataFrame(scaled, columns=df[['HCM','LA']].columns)  
# Chuyển kết quả chuẩn hóa thành dataframe
print(scaled_df)  # Hiển thị dataframe đã chuẩn hóa

# Chuẩn hóa dữ liệu bằng z-score
mean_la = df['LA'].mean()  # Tính giá trị trung bình của cột "LA"
std_la = df['LA'].std()  # Tính độ lệch chuẩn của cột "LA"
df['zLA'] = (df['LA'] - mean_la) / std_la  # Chuẩn hóa cột "LA" bằng z-score
df  # Hiển thị dataframe sau chuẩn hóa

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()  
scaled = scaler.fit_transform(df[['HCM','LA']])  
# Chuẩn hóa cột "HCM" và "LA" bằng StandardScaler
scaled_df = pd.DataFrame(scaled, columns=df[['HCM','LA']].columns)  
# Chuyển kết quả chuẩn hóa thành dataframe
print(scaled_df)  # Hiển thị dataframe đã chuẩn hóa

# Áp dụng một hàm biến đổi đơn giản
def funcX(x):
    return x*x + 1  # Hàm trả về x^2 + 1

df['TransformX'] = funcX(df[["LA"]])  # Áp dụng hàm funcX lên cột "LA"
df  # Hiển thị dataframe sau khi áp dụng hàm
